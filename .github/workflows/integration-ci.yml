name: Integration CI/CD

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        type: choice
        options:
        - staging
        - production
        default: 'staging'
        required: true
      run_tests:
        description: 'Run full test suite'
        type: boolean
        default: true

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests }}
    
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: surfsense_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          # Backend
          cd surfsense_backend
          python -m venv .venv
          source .venv/bin/activate
          pip install -U pip uv
          uv pip sync
          
          # Web
          cd ../surfsense_web
          npm install
          
          # Start services
          cd ../surfsense_backend
          source .venv/bin/activate
          uvicorn main:app --host 0.0.0.0 --port 8000 --reload &
          cd ../surfsense_web
          npm run dev &
          sleep 10
          
      - name: Install Playwright
        run: |
          cd surfsense_web
          npx playwright install --with-deps
          
      - name: Run E2E tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/surfsense_test
        run: |
          cd surfsense_web
          npx playwright test
          
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'SurfSense'
          path: '.'
          format: 'HTML'
          out: 'reports'
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/
          retention-days: 7

  docker-build-all:
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch')
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Generate version info
        id: version
        run: |
          echo "version=$(git describe --tags --always --match="v*" | sed 's/-/./g')" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./surfsense_backend
          push: true
          tags: |
            surfsense/backend:${{ steps.version.outputs.version }}
            surfsense/backend:${{ steps.version.outputs.sha_short }}
            surfsense/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
            
      - name: Build and push web image
        uses: docker/build-push-action@v4
        with:
          context: ./surfsense_web
          push: true
          tags: |
            surfsense/web:${{ steps.version.outputs.version }}
            surfsense/web:${{ steps.version.outputs.sha_short }}
            surfsense/web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
            
  deploy:
    needs: docker-build-all
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Deploy to environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /path/to/deployment
            
            # Backup database before deployment
            DB_BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
            docker compose exec -T db pg_dump -U postgres surfsense > $DB_BACKUP_FILE
            
            # Pull latest images and deploy
            docker compose pull
            docker compose up -d
            
            # Run migrations
            docker compose exec backend alembic upgrade head
            
            echo "Deployment completed successfully at $(date)"
            
      - name: Send deployment notification
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "âœ… SurfSense deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully!\nVersion: ${{ github.sha }}\nDeployed by: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 